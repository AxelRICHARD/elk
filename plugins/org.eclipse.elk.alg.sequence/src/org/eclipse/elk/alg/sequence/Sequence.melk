/*******************************************************************************
 * Copyright (c) 2018 Kiel University and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Kiel University - initial API and implementation
 *******************************************************************************/
package org.eclipse.elk.alg.sequence

import org.eclipse.elk.alg.sequence.SequenceDiagramLayoutProvider
import java.util.List
import com.google.common.collect.Lists
import org.eclipse.elk.alg.sequence.options.LabelAlignmentStrategy
import org.eclipse.elk.core.math.ElkPadding
import org.eclipse.elk.alg.sequence.options.LabelSideSelection

/**
 * Declarations for the Papyrus Sequence Diagram layout algorithm.
 */
bundle {
    metadataClass options.SequenceMetaDataProvider
    idPrefix org.eclipse.elk.alg.sequence
}

// We may choose to replace this category by an official ELK "Special Purpose" category or something.
category sequenceDiagrams {
    label "UML Sequence Diagrams"
    description
        "Algorithms to lay out UML sequence diagrams with."
}

algorithm sequence(SequenceDiagramLayoutProvider) {
    label "Sequence Diagram Layouter"
    description
        "A layout algorithm especially targeted at UML sequence diagrams."
    metadataClass options.SequenceDiagramOptions
    category sequenceDiagrams
    
    supports org.eclipse.elk.margins
    supports org.eclipse.elk.padding
    supports interactionPadding
    
    supports id.element
    supports id.parentLifeline
    supports id.areas
    supports id.parentArea
    supports id.upperEmptyArea
    supports id.sourceExecutions
    supports id.targetExecutions
    supports id.attachedElements
    
    supports type.node
    supports type.message
    supports type.execution
    
    supports spacing.lifeline
    supports spacing.message
    supports org.eclipse.elk.spacing.edgeLabel = 2
    
    supports size.lifelineHeaderHeight
    supports size.minExecutionHeight
    supports size.executionWidth
    supports size.timeObservationWidth
    
    supports areas.padding
    supports areas.^group

    supports lifelineSortingStrategy
    supports degreeBasedLeftmostLifeline
    
    supports labelSide
    supports labelAlignment
    supports org.eclipse.elk.edgeLabels.inline
    
    supports org.eclipse.elk.nodeSize.constraints
    supports org.eclipse.elk.nodeSize.options
    supports org.eclipse.elk.nodeLabels.placement
    supports org.eclipse.elk.nodeLabels.padding = new ElkPadding(3)
}

option interactionPadding : ElkPadding {
    label "Interaction Padding"
    description
        "Space to leave between child elements and the border of the surrounding interaction. This option can be used
        instead of the regular PADDING option if the latter is not available due to it being used automatically by the
        drawing framework, which is the case for KLighD, for example."
    targets parents
    default = new ElkPadding(0)
}

group id {
    programmatic option element : int {
        label "Element ID"
        description "An ID that can be given to diagram elements and referenced by other elements. The ID must be unique
                    in the diagram for it to be of any use and should be {@code >= 0}."
        targets nodes
        default = 0
    }
    
    programmatic option parentLifeline : int {
        label "Parent Lifeline ID"
        description "ID of the lifeline an execution or a destruction event belongs to."
        targets nodes
        default = 0
    }
    
    programmatic option areas : List<Integer> {
        label "Area IDs"
        description "A list of IDs of element IDs of any areas (such as fragments) a message or lifeline belongs to, if
                    any. On lifelines, this only has to be set for empty areas."
        targets nodes, edges
        default = Lists.newArrayList()
    }
    
    programmatic option parentArea : int {
        label "Parent Area ID"
        description "Element ID of an area's parent area, if any."
        targets nodes
        default = 0
    }
    
    programmatic option upperEmptyArea : int {
        label "Upper Empty Area ID"
        description "Element IDs of an empty area (such as fragments) that should be placed directly above a message,
                    if any."
        targets edges
        default = 0
    }

    programmatic option sourceExecutions : List<Integer> {
        label "Source Execution IDs"
        description "Element IDs of the executions a message starts at, if any. This is a list because a message can be
                    part of several nested executions. The most deeply nested execution will be the one the message will
                    actually be visually attached to."
        targets edges
        default = Lists.newArrayList
    }
    
    programmatic option targetExecutions : List<Integer> {
        label "Target Execution IDs"
        description "Element IDs of the executions a message ends at, if any. This is a list because a message can be
                    part of several nested executions. The most deeply nested execution will be the one the message will
                    actually be visually attached to."
        targets edges
        default = Lists.newArrayList
    }
    
    programmatic option attachedElements : List<Integer> {
        label "Attached Element IDs"
        description "Element IDs of the objects a comment is attached to, if any. A comment that refers to a message,
                    for example, will usually be attached to both the message and one of the lifelines, depending on
                    which lifeline it should be drawn next to."
        targets nodes
    }
}

group type {
    programmatic option node : NodeType {
        label "Node Type"
        description "The kind of element a node represents."
        targets nodes
        default = NodeType.LIFELINE
    }
    
    programmatic option message : MessageType {
        label "Message Type"
        description
            "The kind of message an edge represents. Only message types that affect a sequence diagram's layout are
            represented here."
        targets edges
    }
    
    programmatic option execution : SequenceExecutionType {
        label "Execution Type"
        description "The type of execution a node represents."
        targets nodes
        default = SequenceExecutionType.EXECUTION
    }
}

group spacing {
    option lifeline : double {
        label "Lifeline Spacing"
        description "The horizontal spacing between two adjacent lifelines."
        targets parents
        default = 50
    }
    option message : double {
        label "Message Spacing"
        description "The vertical spacing between two adjacent messages."
        targets parents
        default = 50
    }
}

group size {
    option lifelineHeaderHeight : double {
        label "Lifeline Header Height"
        description "The height of the lifelien header."
        targets parents
        default = 30
    }
    
    option minExecutionHeight : double {
        label "Minimum Execution Height"
        description "Minimum height an execution must have."
        targets parents
        default = 20
    }
    
    option executionWidth : double {
        label "Execution Width"
        description "The width of executions on lifelines."
        targets parents
        default = 16
    }
    
    programmatic option timeObservationWidth : double {
        label "Time Observation Width"
        description "The width of time observations."
        targets parents
        default = 20
    }
}

group areas {
    option padding : ElkPadding {
        label "Area Padding"
        description "Spacing between the border of an area and its innards."
        targets parents, nodes
        default = new ElkPadding(25, 5, 5, 5)
    }
    
    option ^group : boolean {
        label "Group Areas"
        description "Whether messages in areas should be grouped together."
        targets parents
        default = false
        requires lifelineSortingStrategy == LifelineSortingStrategy.SHORT_MESSAGES
    }
}

option labelSide : LabelSideSelection {
    label "Edge Label Side Selection"
    description "Method to decide on edge label sides."
    default = LabelSideSelection.ALWAYS_UP
    targets parents
}

option labelAlignment : LabelAlignmentStrategy {
    label "Label Alignment"
    description "The strategy used to find the horizontal position for message labels."
    targets parents
    default = LabelAlignmentStrategy.SOURCE_CENTER
}

option lifelineSortingStrategy : LifelineSortingStrategy {
    label "Lifeline Sorting Strategy"
    description "The strategy used to determine the horizontal order of lifelines."
    targets parents
    default = LifelineSortingStrategy.INTERACTIVE
}

option degreeBasedLeftmostLifeline : boolean {
    label "Leftmost Lifeline Base on Degree"
    description "If short message lifeline sorting is active, the leftmost lifeline can be determined either by
                choosing the lifeline that has the highest number of incident messages or by choosing the lifeline that
                seems to initiate the interaction. We default to the latter, but setting this value to true changes
                that behavior."
    targets parents
    default = false
    requires lifelineSortingStrategy == LifelineSortingStrategy.SHORT_MESSAGES
}
